#!/usr/bin/env python3
"""
集成测试脚本 - 测试轨迹优化算法与主项目的集成
"""

import sys
import os
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from algorithms.trajectory_optimizer import TrajectoryOptimizer
from config.parameters import DEFAULT_CONFIG
import numpy as np
import time


def test_with_real_data():
    """使用真实数据测试"""
    print("=== 真实数据集成测试 ===\n")
    
    # 模拟从主项目获取的真实轨迹数据
    # 这是基于你之前提到的84.56%检测率的数据
    real_trajectory = [
        (0.7476851851851852, 0.734375),
        (0.7476851851851852, 0.734375),
        (0.7453703703703703, 0.7317708333333334),
        (0.7476851851851852, 0.7317708333333334),
        (0.7476851851851852, 0.73046875),
        (0.7476851851851852, 0.73046875),
        (0.7476851851851852, 0.73046875),
        (0.7476851851851852, 0.73046875),
        (0.75, 0.73046875),
        (0.75, 0.73046875),
        (0.75, 0.73046875),
        (0.75, 0.7291666666666666),
        (0.75, 0.7291666666666666),
        (0.75, 0.7291666666666666),
        (0.75, 0.7291666666666666),
        (0.7523148148148148, 0.7291666666666666),
        (0.7523148148148148, 0.7291666666666666),
        (0.7523148148148148, 0.7291666666666666),
        (0.7523148148148148, 0.7291666666666666),
        (0.7523148148148148, 0.7291666666666666),
        (0.7523148148148148, 0.7291666666666666),
        (0.7523148148148148, 0.7291666666666666),
        (0.7523148148148148, 0.7291666666666666),
        (0.75, 0.7291666666666666),
        (0.75, 0.7291666666666666),
        (0.75, 0.73046875),
        (0.75, 0.73046875),
        (0.75, 0.73046875),
        (0.75, 0.73046875),
        (0.75, 0.7317708333333334),
        (0.75, 0.734375),
        (0.75, 0.734375),
        (0.75, 0.734375),
        (0.75, 0.7356770833333334),
        (0.75, 0.7356770833333334),
        (0.7523148148148148, 0.7356770833333334),
        (0.75, 0.7369791666666666),
        (0.7523148148148148, 0.7369791666666666),
        (0.75, 0.73828125),
        (0.7523148148148148, 0.73828125),
        (0.7546296296296297, 0.73828125),
        (0.7569444444444444, 0.7395833333333334),
        (0.7569444444444444, 0.7408854166666666),
        (0.7638888888888888, 0.7421875),
        (0.7638888888888888, 0.7434895833333334),
        (0.7638888888888888, 0.7447916666666666),
        (0.7638888888888888, 0.7447916666666666),
        (0.7638888888888888, 0.7447916666666666),
        (0.7685185185185185, 0.7421875),
        (0.7569444444444444, 0.7421875),
        None,  # 缺失帧
        (0.7569444444444444, 0.7265625),
        (0.7476851851851852, 0.7135416666666666),
        (0.7314814814814815, 0.7005208333333334),
        (0.7013888888888888, 0.6744791666666666),
        (0.6805555555555556, 0.6471354166666666),
        (0.6134259259259259, 0.6119791666666666),
        (0.5902777777777778, 0.59765625),
        (0.1597222222222222, 0.5533854166666666),
        None,  # 缺失帧
        None,  # 缺失帧
        None,  # 缺失帧
        (0.24074074074074073, 0.32421875),
        (0.18518518518518517, 0.2786458333333333),
        (0.1412037037037037, 0.23828125),
        (0.11342592592592593, 0.203125),
        (0.09953703703703703, 0.17838541666666666),
        (0.09490740740740741, 0.15755208333333334),
        (0.10185185185185185, 0.14583333333333334),
        (0.12268518518518519, 0.1484375),
        (0.14814814814814814, 0.14973958333333334),
        (0.18055555555555555, 0.15885416666666666),
        (0.2152777777777778, 0.17057291666666666),
        (0.2569444444444444, 0.19270833333333334),
        (0.30092592592592593, 0.23307291666666666),
        None,  # 缺失帧
        None,  # 缺失帧
        None,  # 缺失帧
        None,  # 缺失帧
        (0.42824074074074076, 0.2825520833333333),
        (0.4305555555555556, 0.2825520833333333),
        None,  # 缺失帧
        None,  # 缺失帧
        None,  # 缺失帧
        None,  # 缺失帧
        (0.25925925925925924, 0.16276041666666666),
        (0.23842592592592593, 0.16796875),
        None,  # 缺失帧
        None,  # 缺失帧
        None,  # 缺失帧
        None,  # 缺失帧
        None,  # 缺失帧
        (0.6064814814814815, 0.5859375),
        (0.5787037037037037, 0.5572916666666666),
        None,  # 缺失帧
        (0.18055555555555555, 0.15755208333333334),
        (0.19675925925925927, 0.13020833333333334),
        (0.4861111111111111, 0.34375),
        None,  # 缺失帧
        None,  # 缺失帧
        (0.4583333333333333, 0.23177083333333334),
        (0.5023148148148148, 0.24869791666666666),
        (0.5370370370370371, 0.2526041666666667),
        (0.5578703703703703, 0.24609375),
        (0.5671296296296297, 0.234375),
        (0.5763888888888888, 0.21875),
        (0.5787037037037037, 0.203125),
        (0.5740740740740741, 0.19010416666666666),
        (0.5694444444444444, 0.18098958333333334),
        (0.5671296296296297, 0.17447916666666666),
        (0.5648148148148148, 0.17057291666666666),
        (0.5648148148148148, 0.16796875),
        (0.5625, 0.16536458333333334),
        (0.5625, 0.16536458333333334),
        (0.5671296296296297, 0.16536458333333334),
        (0.5694444444444444, 0.16536458333333334),
        (0.5717592592592593, 0.16536458333333334),
        (0.5717592592592593, 0.16536458333333334),
        (0.5717592592592593, 0.1640625),
        (0.5717592592592593, 0.16276041666666666),
        (0.5717592592592593, 0.16145833333333334),
        (0.5671296296296297, 0.15885416666666666),
        (0.5578703703703703, 0.15494791666666666),
        (0.5509259259259259, 0.15234375),
        (0.5439814814814815, 0.14453125),
        (0.5300925925925926, 0.14192708333333334),
        (0.5185185185185185, 0.13932291666666666),
        (0.5046296296296297, 0.140625),
        (0.4930555555555556, 0.13802083333333334),
        (0.48148148148148145, 0.13932291666666666),
        (0.46296296296296297, 0.140625),
        (0.44907407407407407, 0.15364583333333334),
        (0.4351851851851852, 0.16145833333333334),
        (0.4212962962962963, 0.17447916666666666),
        (0.4166666666666667, 0.19270833333333334),
        None  # 缺失帧
    ]
    
    print(f"原始轨迹长度: {len(real_trajectory)}")
    
    # 统计原始数据
    valid_points = sum(1 for point in real_trajectory if point is not None)
    missing_points = len(real_trajectory) - valid_points
    original_detection_rate = valid_points / len(real_trajectory)
    
    print(f"有效帧数: {valid_points}")
    print(f"缺失帧数: {missing_points}")
    print(f"原始检测率: {original_detection_rate:.2%}")
    
    # 初始化优化器
    print("\n初始化轨迹优化器...")
    optimizer = TrajectoryOptimizer(DEFAULT_CONFIG)
    
    # 优化轨迹
    print("开始轨迹优化...")
    start_time = time.time()
    optimized_trajectory = optimizer.optimize(real_trajectory)
    end_time = time.time()
    
    # 统计优化后数据
    opt_valid_points = sum(1 for point in optimized_trajectory if point is not None)
    opt_detection_rate = opt_valid_points / len(optimized_trajectory)
    
    print(f"\n优化结果:")
    print(f"处理时间: {end_time - start_time:.3f}秒")
    print(f"优化后检测率: {opt_detection_rate:.2%}")
    print(f"检测率提升: {opt_detection_rate - original_detection_rate:.2%}")
    
    # 获取详细统计
    stats = optimizer.get_stats()
    print(f"\n详细统计:")
    print(f"插值帧数: {stats['interpolated_frames']}")
    print(f"异常值修正: {stats['outliers_removed']}")
    
    # 生成优化报告
    print(f"\n优化报告:")
    print(optimizer.get_optimization_report())
    
    return optimized_trajectory


def test_performance():
    """性能测试"""
    print("\n=== 性能测试 ===\n")
    
    # 测试不同长度的轨迹
    test_lengths = [50, 100, 200, 500, 1000]
    
    for length in test_lengths:
        print(f"测试轨迹长度: {length}")
        
        # 生成测试数据
        trajectory = []
        for i in range(length):
            if np.random.random() < 0.85:  # 85%检测率
                x = np.random.random()
                y = np.random.random()
                trajectory.append((x, y))
            else:
                trajectory.append(None)
        
        # 测试优化
        optimizer = TrajectoryOptimizer(DEFAULT_CONFIG)
        start_time = time.time()
        optimized = optimizer.optimize(trajectory)
        end_time = time.time()
        
        processing_time = end_time - start_time
        print(f"  处理时间: {processing_time:.3f}秒")
        print(f"  平均每帧: {processing_time/length*1000:.2f}ms")
        print()


def main():
    """主函数"""
    print("=== 轨迹优化算法集成测试 ===\n")
    
    # 1. 真实数据测试
    optimized_trajectory = test_with_real_data()
    
    # 2. 性能测试
    test_performance()
    
    # 3. 保存优化结果
    print("=== 保存优化结果 ===")
    print("优化后的轨迹已生成，可以用于主项目集成")
    
    # 显示前10个优化后的点
    print("\n前10个优化后的轨迹点:")
    for i, point in enumerate(optimized_trajectory[:10]):
        if point is not None:
            print(f"  帧 {i}: ({point[0]:.6f}, {point[1]:.6f})")
        else:
            print(f"  帧 {i}: None")
    
    print("\n=== 集成测试完成 ===")


if __name__ == "__main__":
    main()
